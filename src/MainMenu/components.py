# --- Nh·∫≠p c√°c th∆∞ vi·ªán v√† module c·∫ßn thi·∫øt ---
import locale  # D√πng ƒë·ªÉ thi·∫øt l·∫≠p ng√¥n ng·ªØ hi·ªÉn th·ªã (vd: Th·ª© trong tu·∫ßn)
from datetime import datetime  # ƒê·ªÉ l√†m vi·ªác v·ªõi ƒë·ªëi t∆∞·ª£ng ng√†y gi·ªù

# Nh·∫≠p c√°c l·ªõp widget v√† c√¥ng c·ª• t·ª´ PyQt5
from PyQt5.QtWidgets import (QDialog, QFrame, QHBoxLayout, QCheckBox, QLabel, QVBoxLayout,
                             QApplication, QMenu, QInputDialog, QStyle, QPushButton,
                             QScrollArea, QWidget, QLineEdit, QDateTimeEdit, QTextEdit, QDialogButtonBox, QMessageBox,
                             QGraphicsDropShadowEffect, QGraphicsOpacityEffect)
from PyQt5.QtCore import Qt, QMimeData, QDate, QDateTime, QPropertyAnimation, QEasingCurve
from PyQt5.QtGui import QDrag, QCursor, QFont, QColor, QFontMetrics

# Nh·∫≠p c√°c bi·∫øn c·∫•u h√¨nh m√†u s·∫Øc v√† ƒë∆∞·ªùng d·∫´n
from config import COLOR_WHITE, COLOR_BORDER, TEXT_MUTED, COLOR_PRIMARY, COLOR_TEXT_PRIMARY

# --- C·∫•u h√¨nh Ng√¥n ng·ªØ ---
try:
    # C·ªë g·∫Øng thi·∫øt l·∫≠p ng√¥n ng·ªØ sang Ti·∫øng Vi·ªát ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng ƒë·ªãnh d·∫°ng
    locale.setlocale(locale.LC_TIME, 'vi_VN.UTF-8')
except locale.Error:
    # B·ªè qua n·∫øu h·ªá th·ªëng kh√¥ng h·ªó tr·ª£ locale n√†y
    print("Locale 'vi_VN.UTF-8' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£, s·∫Ω s·ª≠ d·ª•ng locale m·∫∑c ƒë·ªãnh.")

# --- C√°c H·∫±ng s·ªë ---
VIETNAMESE_DAYS = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
VIETNAMESE_MONTHS = [
    "Th√°ng M·ªôt", "Th√°ng Hai", "Th√°ng Ba", "Th√°ng T∆∞", "Th√°ng NƒÉm", "Th√°ng S√°u",
    "Th√°ng B·∫£y", "Th√°ng T√°m", "Th√°ng Ch√≠n", "Th√°ng M∆∞·ªùi", "Th√°ng M∆∞·ªùi M·ªôt", "Th√°ng M∆∞·ªùi Hai"
]

# ==============================================================================
# L·ªöP 1: TaskDetailItemWidget - Widget hi·ªÉn th·ªã chi ti·∫øt m·ªôt c√¥ng vi·ªác
# ==============================================================================
class TaskDetailItemWidget(QFrame):
    """
    M·ªôt widget con, d√πng ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa m·ªôt c√¥ng vi·ªác
    trong c·ª≠a s·ªï DayDetailDialog.
    """
    def __init__(self, task_details: dict, calendar_ref=None, parent=None):
        """
        Kh·ªüi t·∫°o widget.
        
        Args:
            task_details (dict): Dictionary ch·ª©a th√¥ng tin chi ti·∫øt c·ªßa c√¥ng vi·ªác.
            calendar_ref (CalendarWidget): Tham chi·∫øu ƒë·∫øn l·ªãch ƒë·ªÉ th·ª±c hi·ªán c√°c h√†nh ƒë·ªông (nh∆∞ x√≥a).
            parent (QWidget): Widget cha.
        """
        super().__init__(parent)  # G·ªçi h√†m kh·ªüi t·∫°o c·ªßa l·ªõp QFrame
        self.setObjectName("TaskDetailItem")  # ƒê·∫∑t t√™n object ƒë·ªÉ √°p d·ª•ng CSS
        self.setFrameShape(QFrame.StyledPanel)  # ƒê·∫∑t ki·ªÉu khung vi·ªÅn
        self.calendar_ref = calendar_ref  # L∆∞u tham chi·∫øu ƒë·∫øn l·ªãch

        # Tr√≠ch xu·∫•t v√† chu·∫©n h√≥a d·ªØ li·ªáu t·ª´ dictionary
        title = task_details.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
        is_done = task_details.get('is_done', False)
        note_text = task_details.get('note', '')
        assignee_name = task_details.get('assignee_name')
        due_at_str = task_details.get('due_at')
        task_id = task_details.get('task_id')
        is_group_task = task_details.get('is_group', False)

        # √Åp d·ª•ng CSS cho widget
        self.setStyleSheet(f"""
            QFrame#TaskDetailItem {{ 
                background: {COLOR_WHITE}; 
                border: 1px solid {COLOR_BORDER}; 
                border-radius: 10px; 
                padding: 10px; 
            }}
            QLabel#StatusSmall {{ font-size: 12px; color: {TEXT_MUTED}; }}
            QLabel#NoteLabelInDialog {{ color: {COLOR_TEXT_PRIMARY}; }}
        """)

        # Layout ch√≠nh, s·∫Øp x·∫øp theo chi·ªÅu ngang
        main_layout = QHBoxLayout(self)
        main_layout.setContentsMargins(8, 8, 8, 8)

        # Layout ch·ª©a n·ªôi dung b√™n tr√°i (ti√™u ƒë·ªÅ, ghi ch√∫, th√¥ng tin)
        content_layout = QVBoxLayout()
        content_layout.setSpacing(6)

        # Nh√£n ti√™u ƒë·ªÅ c√¥ng vi·ªác
        title_label = QLabel(title)
        title_label.setFont(QFont("Arial", 11, QFont.Bold))
        title_label.setWordWrap(True)  # T·ª± ƒë·ªông xu·ªëng d√≤ng n·∫øu ti√™u ƒë·ªÅ qu√° d√†i
        content_layout.addWidget(title_label)

        # H√†ng ch·ª©a th√¥ng tin ph·ª• (tr·∫°ng th√°i, ng∆∞·ªùi th·ª±c hi·ªán, h·∫°n ch√≥t)
        info_row_layout = QHBoxLayout()
        status_label = QLabel("ƒê√£ ho√†n th√†nh" if is_done else "Ch∆∞a ho√†n th√†nh")
        status_label.setObjectName('StatusSmall')
        info_row_layout.addWidget(status_label)

        if assignee_name:
            assignee_label = QLabel(f"üë§ {assignee_name}")
            assignee_label.setStyleSheet(f'color: {COLOR_PRIMARY}; margin-left:8px;')
            info_row_layout.addWidget(assignee_label)

        if due_at_str:
            due_label = QLabel(f"‚è∞ {due_at_str}")
            due_label.setStyleSheet(f'color: {TEXT_MUTED}; margin-left:8px;')
            info_row_layout.addWidget(due_label)
        
        info_row_layout.addStretch()  # ƒê·∫©y c√°c m·ª•c v·ªÅ b√™n tr√°i
        content_layout.addLayout(info_row_layout)

        # Nh√£n hi·ªÉn th·ªã ghi ch√∫ n·∫øu c√≥
        if note_text:
            note_label = QLabel(f"<b>Ghi ch√∫:</b> {note_text}")
            note_label.setWordWrap(True)
            note_label.setObjectName("NoteLabelInDialog")
            content_layout.addWidget(note_label)

        # H√†ng ch·ª©a c√°c n√∫t h√†nh ƒë·ªông (v√≠ d·ª•: n√∫t X√≥a)
        actions_row_layout = QHBoxLayout()
        actions_row_layout.addStretch()  # ƒê·∫©y n√∫t x√≥a v·ªÅ b√™n ph·∫£i
        delete_button = QPushButton("X√≥a")
        
        # H√†m n·ªôi b·ªô ƒë·ªÉ x·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t x√≥a
        def perform_delete():
            try:
                if self.calendar_ref and task_id is not None:
                    # G·ªçi h√†m x√≥a t·ª´ CalendarWidget
                    self.calendar_ref.delete_task(task_id, is_group=is_group_task)
            except Exception as error:
                print(f"L·ªói khi th·ª±c hi·ªán x√≥a: {error}")
        
        delete_button.clicked.connect(perform_delete)  # K·∫øt n·ªëi s·ª± ki·ªán click
        actions_row_layout.addWidget(delete_button)
        content_layout.addLayout(actions_row_layout)

        main_layout.addLayout(content_layout)

# ==============================================================================
# L·ªöP 2: DayDetailDialog - C·ª≠a s·ªï hi·ªÉn th·ªã danh s√°ch c√¥ng vi·ªác trong ng√†y
# ==============================================================================
class DayDetailDialog(QDialog):
    """
    C·ª≠a s·ªï (dialog) b·∫≠t l√™n ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt t·∫•t c·∫£ c√¥ng vi·ªác c·ªßa m·ªôt ng√†y c·ª• th·ªÉ.
    """
    def __init__(self, selected_date: datetime, tasks_list: list, calendar_ref=None, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Chi Ti·∫øt C√¥ng Vi·ªác Trong Ng√†y")
        self.setMinimumSize(520, 460)
        self.setObjectName("DayDetailDialog")
        self.calendar_ref = calendar_ref

        main_layout = QVBoxLayout(self)

        # ƒê·ªãnh d·∫°ng chu·ªói ng√†y th√°ng nƒÉm theo Ti·∫øng Vi·ªát
        day_name = VIETNAMESE_DAYS[selected_date.weekday()]
        month_name = VIETNAMESE_MONTHS[selected_date.month - 1]
        date_string = f"{day_name}, ng√†y {selected_date.day} {month_name} nƒÉm {selected_date.year}"

        # Nh√£n hi·ªÉn th·ªã ng√†y th√°ng
        date_label = QLabel(date_string)
        date_label.setObjectName("DateHeaderLabel")
        date_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(date_label)

        # T·∫°o khu v·ª±c c√≥ th·ªÉ cu·ªôn ƒë·ªÉ ch·ª©a danh s√°ch c√¥ng vi·ªác
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_content_widget = QWidget()
        tasks_layout = QVBoxLayout(scroll_content_widget)
        tasks_layout.setAlignment(Qt.AlignTop) # C√°c c√¥ng vi·ªác s·∫Ω x·∫øp t·ª´ tr√™n xu·ªëng
        scroll_area.setWidget(scroll_content_widget)
        main_layout.addWidget(scroll_area)

        # L·∫∑p qua danh s√°ch c√¥ng vi·ªác v√† t·∫°o widget cho t·ª´ng c√°i
        if tasks_list:
            for task_details in tasks_list:
                detail_item_widget = TaskDetailItemWidget(task_details, calendar_ref=self.calendar_ref)
                tasks_layout.addWidget(detail_item_widget)
        else:
            # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ c√¥ng vi·ªác n√†o
            tasks_layout.addWidget(QLabel("Kh√¥ng c√≥ c√¥ng vi·ªác n√†o trong ng√†y n√†y."))

        # N√∫t ƒë√≥ng c·ª≠a s·ªï
        close_button = QPushButton("ƒê√≥ng")
        close_button.clicked.connect(self.accept) # self.accept() l√† c√°ch chu·∫©n ƒë·ªÉ ƒë√≥ng QDialog
        main_layout.addWidget(close_button, 0, Qt.AlignRight)

# ==============================================================================
# L·ªöP 3: ElidedLabel - Nh√£n c√≥ th·ªÉ t·ª± c·∫Øt ng·∫Øn vƒÉn b·∫£n d√†i
# ==============================================================================
class ElidedLabel(QLabel):
    """
    M·ªôt QLabel t√πy ch·ªânh c√≥ kh·∫£ nƒÉng t·ª± ƒë·ªông c·∫Øt ng·∫Øn vƒÉn b·∫£n d√†i v√† th√™m "..."
    khi kh√¥ng ƒë·ªß kh√¥ng gian hi·ªÉn th·ªã.
    """
    def __init__(self, text='', parent=None):
        super().__init__(parent)
        self._full_text = str(text or '') # L∆∞u tr·ªØ vƒÉn b·∫£n g·ªëc, ƒë·∫ßy ƒë·ªß
        self.setText(self._full_text)

    def setText(self, text):
        """Ghi ƒë√® ph∆∞∆°ng th·ª©c setText ƒë·ªÉ l∆∞u vƒÉn b·∫£n g·ªëc tr∆∞·ªõc khi hi·ªÉn th·ªã."""
        self._full_text = str(text or '')
        super().setText(self._full_text)
        self._update_elided_text() # C·∫≠p nh·∫≠t l·∫°i vƒÉn b·∫£n hi·ªÉn th·ªã

    def resizeEvent(self, event):
        """S·ª± ki·ªán ƒë∆∞·ª£c g·ªçi m·ªói khi k√≠ch th∆∞·ªõc c·ªßa label thay ƒë·ªïi."""
        super().resizeEvent(event)
        self._update_elided_text() # C·∫≠p nh·∫≠t l·∫°i vƒÉn b·∫£n cho v·ª´a v·ªõi k√≠ch th∆∞·ªõc m·ªõi

    def _update_elided_text(self):
        """C·∫Øt ng·∫Øn vƒÉn b·∫£n n·∫øu c·∫ßn v√† hi·ªÉn th·ªã."""
        try:
            font_metrics = QFontMetrics(self.font()) # C√¥ng c·ª• ƒëo k√≠ch th∆∞·ªõc vƒÉn b·∫£n
            # T√≠nh to√°n chi·ªÅu r·ªông c√≥ s·∫µn (tr·ª´ ƒëi m·ªôt ch√∫t padding)
            available_width = max(8, self.width() - 24)
            # C·∫Øt ng·∫Øn vƒÉn b·∫£n b·∫±ng c√¥ng c·ª• c·ªßa Qt
            elided_text = font_metrics.elidedText(self._full_text, Qt.ElideRight, available_width)
            super().setText(elided_text) # Hi·ªÉn th·ªã vƒÉn b·∫£n ƒë√£ c·∫Øt ng·∫Øn
            
            # Lu√¥n hi·ªÉn th·ªã vƒÉn b·∫£n ƒë·∫ßy ƒë·ªß khi ng∆∞·ªùi d√πng di chu·ªôt v√†o (tooltip)
            if self._full_text:
                self.setToolTip(self._full_text)
        except Exception as error:
            print(f"L·ªói khi c·∫Øt ng·∫Øn vƒÉn b·∫£n: {error}")

# ==============================================================================
# L·ªöP 4: TaskBadge - Widget hi·ªÉn th·ªã c√¥ng vi·ªác d·∫°ng "huy hi·ªáu" nh·ªè g·ªçn
# ==============================================================================
class TaskBadge(QFrame):
    """
    Widget nh·ªè g·ªçn ƒë·ªÉ hi·ªÉn th·ªã m·ªôt c√¥ng vi·ªác tr√™n √¥ l·ªãch.
    Bao g·ªìm ti√™u ƒë·ªÅ (t·ª± c·∫Øt ng·∫Øn), checkbox v√† c√°c hi·ªáu ·ª©ng t∆∞∆°ng t√°c.
    """
    def __init__(self, title, color='#66bb6a', note='', assignee_name=None, 
                 task_id=None, is_group=False, calendar_ref=None, parent=None):
        super().__init__(parent)
        self.setObjectName('TaskBadge')
        
        # L∆∞u tr·ªØ c√°c th√¥ng tin quan tr·ªçng c·ªßa c√¥ng vi·ªác
        self.task_id = task_id
        self.is_group_task = is_group
        self.calendar_ref = calendar_ref
        self.note_text = note
        self.assignee_name = assignee_name
        self.task_title = title or ''

        # C·∫•u h√¨nh giao di·ªán c∆° b·∫£n
        self.setFixedHeight(36)
        self.setMaximumWidth(340)

        layout = QHBoxLayout(self)
        layout.setContentsMargins(8, 2, 6, 2)
        layout.setSpacing(8)

        # Bi·ªÉu t∆∞·ª£ng b√™n tr√°i (ƒë·ªÉ ph√¢n bi·ªát c√¥ng vi·ªác nh√≥m)
        self.icon_label = QLabel()
        self.icon_label.setFixedSize(20, 20)
        layout.addWidget(self.icon_label, 0, Qt.AlignVCenter)
        if self.is_group_task:
            self.icon_label.setText('üë•') # Emoji nh√≥m
            self.icon_label.setStyleSheet('font-size:11px; color: white; background: rgba(0,0,0,0.12); border-radius:8px;')
        else:
            self.icon_label.setStyleSheet('background: transparent;') # ·∫®n ƒëi n·∫øu l√† vi·ªác c√° nh√¢n

        # Nh√£n ti√™u ƒë·ªÅ (s·ª≠ d·ª•ng ElidedLabel ƒë·ªÉ t·ª± c·∫Øt ng·∫Øn)
        self.title_label = ElidedLabel(self.task_title)
        self.title_label.setStyleSheet('color: white; font-size: 13px; font-weight:600;')
        layout.addWidget(self.title_label, 1) # Chi·∫øm ph·∫ßn l·ªõn kh√¥ng gian

        # Checkbox (d√πng QPushButton c√≥ th·ªÉ check) ƒë·ªÉ t∆∞∆°ng t√°c
        self.checkbox = QPushButton('')
        self.checkbox.setCheckable(True)
        self.checkbox.setFixedSize(24, 24)
        self.checkbox.setStyleSheet("""
            QPushButton { background: rgba(255,255,255,0.12); border-radius: 6px; border: none; color: white; font-weight: bold; }
            QPushButton:checked { background: white; color: #2b2b2b; }
        """)
        layout.addWidget(self.checkbox, 0, Qt.AlignRight)

        # √Åp d·ª•ng m√†u n·ªÅn v√† hi·ªáu ·ª©ng ƒë·ªï b√≥ng
        self.setStyleSheet(f'background: {color}; border-radius: 12px; padding: 4px;')
        shadow = QGraphicsDropShadowEffect(self)
        shadow.setBlurRadius(12)
        shadow.setOffset(0, 4)
        shadow.setColor(QColor(0, 0, 0, 80))
        self.setGraphicsEffect(shadow)

        # K·∫øt n·ªëi s·ª± ki·ªán `toggled` c·ªßa checkbox v·ªõi h√†m x·ª≠ l√Ω
        self.checkbox.toggled.connect(self._on_checkbox_changed)

    def text(self):
        """H√†m tr·ª£ gi√∫p ƒë·ªÉ l·∫•y ti√™u ƒë·ªÅ c·ªßa badge."""
        return self.task_title

    def mouseDoubleClickEvent(self, event):
        """M·ªü c·ª≠a s·ªï chi ti·∫øt khi ng∆∞·ªùi d√πng double-click v√†o badge."""
        if event.button() == Qt.LeftButton and self.calendar_ref:
            try:
                dialog = QDialog(self)
                dialog.setWindowTitle('Chi ti·∫øt c√¥ng vi·ªác')
                dialog.setMinimumWidth(420)
                
                # T·∫°o d·ªØ li·ªáu ƒë·ªÉ truy·ªÅn v√†o TaskDetailItemWidget
                task_details = {
                    'title': self.task_title, 'is_done': self.checkbox.isChecked(),
                    'note': self.note_text, 'assignee_name': self.assignee_name,
                    'task_id': self.task_id, 'is_group': self.is_group_task
                }
                
                content_widget = TaskDetailItemWidget(task_details, calendar_ref=self.calendar_ref)
                layout = QVBoxLayout(dialog)
                layout.addWidget(content_widget)
                
                button_box = QDialogButtonBox(QDialogButtonBox.Close)
                button_box.rejected.connect(dialog.reject)
                layout.addWidget(button_box)
                
                dialog.exec_()
            except Exception as error:
                print(f"L·ªói khi m·ªü dialog chi ti·∫øt: {error}")

    def contextMenuEvent(self, event):
        """Hi·ªÉn th·ªã menu ng·ªØ c·∫£nh (chu·ªôt ph·∫£i) ƒë·ªÉ x√≥a c√¥ng vi·ªác."""
        context_menu = QMenu(self)
        delete_action = context_menu.addAction('X√≥a c√¥ng vi·ªác n√†y')
        action = context_menu.exec_(self.mapToGlobal(event.pos()))
        if action == delete_action:
            if self.task_id and self.calendar_ref:
                self.calendar_ref.delete_task(self.task_id, self.is_group_task)

    def _on_checkbox_changed(self, is_checked):
        """
        H√†m ƒë∆∞·ª£c g·ªçi khi tr·∫°ng th√°i c·ªßa checkbox thay ƒë·ªïi.
        X·ª≠ l√Ω vi·ªác c·∫≠p nh·∫≠t tr·∫°ng th√°i c√¥ng vi·ªác trong CSDL.
        """
        # Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i (bool) sang s·ªë nguy√™n (0 ho·∫∑c 1)
        new_status = 1 if is_checked else 0

        # 1. Ki·ªÉm tra quy·ªÅn h·∫°n tr∆∞·ªõc khi th·ª±c hi·ªán
        allowed, message = self.calendar_ref.can_toggle_task(self.task_id, self.is_group_task)
        if not allowed:
            QMessageBox.warning(self, 'Kh√¥ng c√≥ quy·ªÅn', message)
            # Ho√†n t√°c l·∫°i tr·∫°ng th√°i checkbox tr√™n giao di·ªán
            self.checkbox.blockSignals(True)
            self.checkbox.setChecked(not is_checked)
            self.checkbox.blockSignals(False)
            return

        # 2. C·∫≠p nh·∫≠t giao di·ªán m·ªôt c√°ch "l·∫°c quan" (thay ƒë·ªïi ngay l·∫≠p t·ª©c)
        self.checkbox.setText('‚úì' if is_checked else '')
        if is_checked:
            self.setStyleSheet('background: #bdbdbd; border-radius: 12px; padding: 4px;')
            self.title_label.setStyleSheet('color: #fff; text-decoration: line-through; font-size:11px;')
        else:
            # L·∫•y l·∫°i m√†u g·ªëc t√πy theo l√† vi·ªác nh√≥m hay c√° nh√¢n
            original_color = '#5c6bc0' if self.is_group_task else '#66bb6a'
            self.setStyleSheet(f'background: {original_color}; border-radius: 12px; padding: 4px;')
            self.title_label.setStyleSheet('color: #fff; font-size:11px;')

        # 3. G·ªçi CSDL ƒë·ªÉ l∆∞u thay ƒë·ªïi
        success = self.calendar_ref.update_task_status(self.task_id, new_status, self.is_group_task)
        
        # 4. N·∫øu l∆∞u th·∫•t b·∫°i, ho√†n t√°c l·∫°i giao di·ªán
        if not success:
            QMessageBox.warning(self, 'L·ªói', 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i c√¥ng vi·ªác.')
            self.checkbox.blockSignals(True)
            self.checkbox.setChecked(not is_checked) # ƒê·∫£o ng∆∞·ª£c l·∫°i
            self.checkbox.blockSignals(False)
            # B·∫°n c√≥ th·ªÉ th√™m code ƒë·ªÉ ho√†n t√°c c·∫£ style ·ªü ƒë√¢y n·∫øu c·∫ßn

# ==============================================================================
# L·ªöP 5: AddTaskDialog - C·ª≠a s·ªï th√™m c√¥ng vi·ªác m·ªõi
# ==============================================================================
class AddTaskDialog(QDialog):
    """C·ª≠a s·ªï b·∫≠t l√™n cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p th√¥ng tin ƒë·ªÉ t·∫°o c√¥ng vi·ªác m·ªõi."""
    def __init__(self, default_date: datetime, parent=None):
        super().__init__(parent)
        self.setWindowTitle("‚ú® Th√™m c√¥ng vi·ªác m·ªõi")
        self.setMinimumWidth(420)

        main_layout = QVBoxLayout(self)

        # C√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        self.title_input = QLineEdit(placeholderText="Nh·∫≠p ti√™u ƒë·ªÅ c√¥ng vi·ªác...")
        self.date_edit = QDateTimeEdit()
        self.date_edit.setCalendarPopup(True)
        self.date_edit.setDisplayFormat('yyyy-MM-dd HH:mm:ss')
        # ƒê·∫∑t ng√†y gi·ªù m·∫∑c ƒë·ªãnh l√† ng√†y ng∆∞·ªùi d√πng ƒë√£ click v√†o
        self.date_edit.setDateTime(QDateTime(default_date))
        
        self.note_edit = QTextEdit(placeholderText="M·ªôt v√†i ghi ch√∫ ng·∫Øn...")
        self.note_edit.setFixedHeight(90)

        main_layout.addWidget(QLabel("Ti√™u ƒë·ªÅ"))
        main_layout.addWidget(self.title_input)
        main_layout.addWidget(QLabel("Ng√†y gi·ªù ho√†n th√†nh"))
        main_layout.addWidget(self.date_edit)
        main_layout.addWidget(QLabel("Ghi ch√∫ (t√πy ch·ªçn)"))
        main_layout.addWidget(self.note_edit)

        # C√°c n√∫t "Th√™m" v√† "H·ªßy"
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.button(QDialogButtonBox.Ok).setText("Th√™m")
        button_box.button(QDialogButtonBox.Cancel).setText("H·ªßy")
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        main_layout.addWidget(button_box)

    # C√°c h√†m ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ form sau khi ng∆∞·ªùi d√πng nh·∫•n "Th√™m"
    def get_title(self) -> str:
        return self.title_input.text().strip()

    def get_due_datetime(self) -> QDateTime:
        return self.date_edit.dateTime()

    def get_note(self) -> str:
        return self.note_edit.toPlainText().strip()


# ==============================================================================
# L·ªöP 6: DayWidget - Widget ƒë·∫°i di·ªán cho m·ªôt √¥ ng√†y trong l·ªãch
# ==============================================================================
class DayWidget(QFrame):
    """
    Widget ƒë·∫°i di·ªán cho m·ªôt √¥ ng√†y trong l∆∞·ªõi l·ªãch.
    Ch·ª©a nh√£n ng√†y v√† m·ªôt layout ƒë·ªÉ th√™m c√°c TaskBadge.
    """
    def __init__(self, date_text, year, month, calendar_ref=None, parent=None):
        super().__init__(parent)
        self.setObjectName("DayWidget")
        self.setFrameShape(QFrame.StyledPanel)
        self.setAcceptDrops(True) # Cho ph√©p k√©o-th·∫£ c√¥ng vi·ªác v√†o √¥ n√†y

        # L∆∞u th√¥ng tin ng√†y, th√°ng, nƒÉm
        self.day_number = int(date_text)
        self.year = year
        self.month = month
        self.calendar_ref = calendar_ref

        main_layout = QVBoxLayout(self)
        main_layout.setAlignment(Qt.AlignTop)

        # Nh√£n hi·ªÉn th·ªã s·ªë ng√†y
        self.date_label = QLabel(date_text)
        self.date_label.setObjectName("DateLabel")
        self.date_label.setAlignment(Qt.AlignRight)
        main_layout.addWidget(self.date_label)

        # Layout ƒë·ªÉ ch·ª©a c√°c TaskBadge
        self.tasks_layout = QVBoxLayout()
        main_layout.addLayout(self.tasks_layout)

    def set_today_highlight(self, is_today):
        """ƒê√°nh d·∫•u √¥ n·∫øu l√† ng√†y h√¥m nay."""
        if is_today:
            self.setStyleSheet("background-color: rgba(255, 0, 0, 60); border-radius: 6px; padding: 4px;")
        else:
            self.setStyleSheet("") # X√≥a highlight

    def _prompt_for_new_task(self):
        """M·ªü dialog ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p th√¥ng tin c√¥ng vi·ªác m·ªõi."""
        default_date = datetime(self.year, self.month, self.day_number)
        dialog = AddTaskDialog(default_date, self)
        
        # N·∫øu ng∆∞·ªùi d√πng nh·∫•n "Th√™m" v√† c√≥ nh·∫≠p ti√™u ƒë·ªÅ
        if dialog.exec_() == QDialog.Accepted and dialog.get_title():
            title = dialog.get_title()
            due_qdatetime = dialog.get_due_datetime()
            # Chuy·ªÉn ƒë·ªïi t·ª´ QDateTime c·ªßa Qt sang datetime c·ªßa Python
            due_datetime_obj = due_qdatetime.toPyDateTime()
            note = dialog.get_note()

            if self.calendar_ref:
                # D·ª±a v√†o ch·∫ø ƒë·ªô xem hi·ªán t·∫°i ƒë·ªÉ quy·∫øt ƒë·ªãnh th√™m vi·ªác c√° nh√¢n hay nh√≥m
                if self.calendar_ref.view_mode == 'group':
                    self.calendar_ref.add_group_task_to_db(due_datetime_obj, title, note_text=note)
                else:
                    self.calendar_ref.add_task_to_db(due_datetime_obj, title, note_text=note)
    
    def mouseDoubleClickEvent(self, event):
        """M·ªü c·ª≠a s·ªï chi ti·∫øt ng√†y khi double-click v√†o v√πng tr·ªëng c·ªßa √¥ ng√†y."""
        # Ch·ªâ m·ªü dialog n·∫øu kh√¥ng double-click v√†o m·ªôt c√¥ng vi·ªác ƒë√£ c√≥
        child_widget = self.childAt(event.pos())
        if not isinstance(child_widget, TaskBadge):
            self.calendar_ref.open_day_detail(self.day_number)
        
    def add_task(self, task_badge: TaskBadge):
        """
        Th√™m m·ªôt TaskBadge v√†o √¥ ng√†y.
        Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng badge hi·ªÉn th·ªã ƒë·ªÉ tr√°nh v·ª° layout.
        """
        # ƒê·∫øm s·ªë l∆∞·ª£ng badge ƒë√£ c√≥
        existing_badges = [self.tasks_layout.itemAt(i).widget() 
                           for i in range(self.tasks_layout.count()) 
                           if isinstance(self.tasks_layout.itemAt(i).widget(), TaskBadge)]
        
        # N·∫øu ch∆∞a ƒë·ªß 3 badge, th√™m badge m·ªõi v√†o
        if len(existing_badges) < 3:
            self.tasks_layout.addWidget(task_badge)
        else:
            # N·∫øu ƒë√£ ƒë·ªß, t√¨m ho·∫∑c t·∫°o nh√£n "+1", "+2", ...
            overflow_label = self.findChild(QLabel, "OverflowLabel")
            if not overflow_label:
                overflow_label = QLabel()
                overflow_label.setObjectName("OverflowLabel")
                overflow_label.setStyleSheet('background:#ddd; color:#333; padding:4px 8px; border-radius:10px;')
                self.tasks_layout.addWidget(overflow_label)
            
            # C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng c√¥ng vi·ªác b·ªã ·∫©n
            current_overflow_count = int(overflow_label.text().replace("+", "")) if overflow_label.text() else 0
            overflow_label.setText(f"+{current_overflow_count + 1}")

    def clear_tasks(self):
        """X√≥a t·∫•t c·∫£ c√°c widget c√¥ng vi·ªác kh·ªèi √¥ ng√†y n√†y."""
        while self.tasks_layout.count():
            item_to_remove = self.tasks_layout.takeAt(0)
            widget = item_to_remove.widget()
            if widget is not None:
                widget.deleteLater() # X√≥a widget m·ªôt c√°ch an to√†n

    def contextMenuEvent(self, event):
        """Hi·ªÉn th·ªã menu chu·ªôt ph·∫£i ƒë·ªÉ th√™m c√¥ng vi·ªác m·ªõi."""
        context_menu = QMenu(self)
        add_task_action = context_menu.addAction("Th√™m c√¥ng vi·ªác m·ªõi v√†o ng√†y n√†y")
        action = context_menu.exec_(self.mapToGlobal(event.pos()))
        if action == add_task_action:
            self._prompt_for_new_task() # G·ªçi h√†m m·ªü dialog