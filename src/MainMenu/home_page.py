# --- Nh·∫≠p c√°c th∆∞ vi·ªán v√† module c·∫ßn thi·∫øt ---
import os
from datetime import datetime, timedelta
import time

# Nh·∫≠p c√°c l·ªõp widget v√† c√¥ng c·ª• t·ª´ PyQt5
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
                             QLabel, QLineEdit, QScrollArea, QFrame,
                             QGridLayout, QGroupBox, QComboBox, QMessageBox,
                             QDateTimeEdit, QGraphicsDropShadowEffect, QMenu, QAction)
from PyQt5.QtCore import Qt, pyqtSignal, QTimer, QDateTime
from PyQt5.QtGui import QIcon, QColor

# Nh·∫≠p c√°c module v√† c·∫•u h√¨nh t√πy ch·ªânh c·ªßa d·ª± √°n
from Managers.database_manager import Database
from config import (ICON_DIR, COLOR_BACKGROUND, COLOR_PRIMARY, COLOR_SUCCESS, 
                    COLOR_DANGER, COLOR_TEXT_PRIMARY, COLOR_TEXT_SECONDARY, 
                    COLOR_BORDER, COLOR_HOVER, PRIORITY_COLORS, COLOR_WHITE)


# ==============================================================================
# L·ªöP 1: TaskItemWidget - Widget hi·ªÉn th·ªã m·ªôt c√¥ng vi·ªác trong danh s√°ch
# ==============================================================================
class TaskItemWidget(QFrame):
    """
    Widget ƒë·∫°i di·ªán cho m·ªôt m·ª•c c√¥ng vi·ªác trong danh s√°ch.
    Hi·ªÉn th·ªã ti√™u ƒë·ªÅ, ghi ch√∫, th√¥ng tin chi ti·∫øt v√† c√°c n√∫t h√†nh ƒë·ªông.
    """
    # ƒê·ªãnh nghƒ©a c√°c t√≠n hi·ªáu (signals) ƒë·ªÉ giao ti·∫øp v·ªõi widget cha (DoNowView)
    task_toggled = pyqtSignal(str)  # Ph√°t ra khi tr·∫°ng th√°i ho√†n th√†nh thay ƒë·ªïi
    task_deleted = pyqtSignal(str)  # Ph√°t ra khi ng∆∞·ªùi d√πng nh·∫•n n√∫t x√≥a
    task_started = pyqtSignal(str)  # Ph√°t ra khi ng∆∞·ªùi d√πng nh·∫•n n√∫t b·∫Øt ƒë·∫ßu

    def __init__(self, task_details, timer_metadata, parent=None):
        """
        Kh·ªüi t·∫°o widget.
        
        Args:
            task_details (dict): Dictionary ch·ª©a th√¥ng tin c·ªßa c√¥ng vi·ªác.
            timer_metadata (dict): Dictionary ch·ª©a th√¥ng tin v·ªÅ th·ªùi gian (vd: th·ªùi gian b·∫Øt ƒë·∫ßu).
            parent (QWidget): Widget cha.
        """
        super().__init__(parent)
        self.task_id = task_details['id']  # L∆∞u ID c·ªßa c√¥ng vi·ªác
        self.task_details = task_details
        self.timer_metadata = timer_metadata
        self.initialize_ui()  # C√†i ƒë·∫∑t giao di·ªán
        self.apply_shadow_effect()  # √Åp d·ª•ng hi·ªáu ·ª©ng ƒë·ªï b√≥ng

    def initialize_ui(self):
        """X√¢y d·ª±ng giao di·ªán cho m·ªôt m·ª•c c√¥ng vi·ªác."""
        self.setObjectName("TaskItemWidget")
        is_done = self.task_details['is_done']
        
        # Thi·∫øt l·∫≠p CSS cho widget, c√≥ thay ƒë·ªïi style n·∫øu c√¥ng vi·ªác ƒë√£ ho√†n th√†nh
        self.setStyleSheet(f"""
            #TaskItemWidget {{
                background-color: {COLOR_WHITE};
                border: 1px solid {COLOR_BORDER};
                border-radius: 8px; padding: 12px; margin: 4px 8px;
            }}
            #TaskItemWidget[done="true"] {{ background-color: #F8F9FA; }}
            QLabel {{ background-color: transparent; border: none; }}
        """)
        self.setProperty("done", is_done)  # ƒê·∫∑t thu·ªôc t√≠nh "done" ƒë·ªÉ CSS c√≥ th·ªÉ √°p d·ª•ng

        main_layout = QHBoxLayout(self)  # Layout ch√≠nh, s·∫Øp x·∫øp theo chi·ªÅu ngang

        # Layout ch·ª©a n·ªôi dung ch·ªØ (ti√™u ƒë·ªÅ, ghi ch√∫, chi ti·∫øt)
        content_layout = QVBoxLayout()
        title_label = QLabel(self.task_details['title'])
        # Thay ƒë·ªïi style c·ªßa ti√™u ƒë·ªÅ n·∫øu c√¥ng vi·ªác ƒë√£ xong (g·∫°ch ngang, m√†u x√°m)
        if is_done:
            title_label.setStyleSheet(f"font-size: 15px; text-decoration: line-through; color: {COLOR_TEXT_SECONDARY};")
        else:
            title_label.setStyleSheet(f"font-size: 15px; font-weight: bold; color: {COLOR_TEXT_PRIMARY};")
        content_layout.addWidget(title_label)

        # Hi·ªÉn th·ªã ghi ch√∫ n·∫øu c√≥
        note_text = self.task_details.get('note', '')
        if note_text:
            note_label = QLabel(note_text)
            note_label.setStyleSheet(f"font-size:12px; color: {COLOR_TEXT_SECONDARY}; padding-top:4px;")
            content_layout.addWidget(note_label)
        
        # X√¢y d·ª±ng chu·ªói th√¥ng tin chi ti·∫øt (ƒë·ªô ∆∞u ti√™n, h·∫°n ch√≥t, th·ªùi gian ∆∞·ªõc t√≠nh)
        details_parts = []
        priority = self.task_details.get('priority', 4)
        if priority < 4:
            priority_color = PRIORITY_COLORS.get(priority, COLOR_TEXT_SECONDARY)
            details_parts.append(f"<b style='color:{priority_color};'>∆Øu ti√™n {priority}</b>")

        if self.task_details['due_at']:
            try:
                due_date = datetime.fromisoformat(self.task_details['due_at'])
                details_parts.append(f"üìÖ {due_date.strftime('%d/%m %H:%M')}")
            except (ValueError, TypeError):
                details_parts.append(f"üìÖ {self.task_details['due_at']}")
        
        if self.task_details['estimated_minutes']:
            details_parts.append(f"‚è±Ô∏è {self.task_details['estimated_minutes']} ph√∫t")

        # Hi·ªÉn th·ªã chu·ªói th√¥ng tin chi ti·∫øt n·∫øu c√≥
        if details_parts:
            details_label = QLabel("  ‚Ä¢  ".join(details_parts))
            details_label.setStyleSheet(f"font-size: 11px; color: {COLOR_TEXT_SECONDARY}; padding-top: 4px;")
            content_layout.addWidget(details_label)

        # Layout cho c√°c n√∫t h√†nh ƒë·ªông (ho√†n th√†nh, x√≥a, ...)
        action_layout = QHBoxLayout()
        action_layout.setSpacing(5)
        action_layout.setAlignment(Qt.AlignRight)

        # Hi·ªÉn th·ªã c√°c n√∫t t√πy thu·ªôc v√†o tr·∫°ng th√°i c√¥ng vi·ªác
        if not is_done:
            start_button = self._create_icon_button(os.path.join(ICON_DIR, 'play.svg'), "B·∫Øt ƒë·∫ßu t√≠nh gi·ªù")
            start_button.clicked.connect(lambda: self.task_started.emit(self.task_id))
            
            complete_button = self._create_icon_button(os.path.join(ICON_DIR, 'check-circle.svg'), "ƒê√°nh d·∫•u ho√†n th√†nh")
            complete_button.clicked.connect(lambda: self.task_toggled.emit(self.task_id))
            
            action_layout.addWidget(start_button)
            action_layout.addWidget(complete_button)
        else:
            undo_button = self._create_icon_button(os.path.join(ICON_DIR, 'rotate-ccw.svg'), "ƒê√°nh d·∫•u ch∆∞a ho√†n th√†nh")
            undo_button.clicked.connect(lambda: self.task_toggled.emit(self.task_id))
            action_layout.addWidget(undo_button)
            
        delete_button = self._create_icon_button(os.path.join(ICON_DIR, 'x-circle.svg'), "X√≥a c√¥ng vi·ªác")
        delete_button.clicked.connect(lambda: self.task_deleted.emit(self.task_id))
        action_layout.addWidget(delete_button)

        # G·∫Øn c√°c layout con v√†o layout ch√≠nh
        main_layout.addLayout(content_layout)
        main_layout.addStretch()  # ƒê·∫©y c√°c n√∫t h√†nh ƒë·ªông v·ªÅ ph√≠a b√™n ph·∫£i
        main_layout.addLayout(action_layout)

    def _create_icon_button(self, icon_path, tooltip):
        """H√†m tr·ª£ gi√∫p ƒë·ªÉ t·∫°o m·ªôt QPushButton ch·ªâ c√≥ icon."""
        button = QPushButton()
        if os.path.exists(icon_path):
            button.setIcon(QIcon(icon_path))
        button.setFixedSize(28, 28)
        button.setToolTip(tooltip)
        button.setCursor(Qt.PointingHandCursor)
        button.setStyleSheet("QPushButton { border-radius: 14px; background-color: transparent; } QPushButton:hover { background-color: #e0e0e0; }")
        return button
        
    def apply_shadow_effect(self):
        """√Åp d·ª•ng hi·ªáu ·ª©ng ƒë·ªï b√≥ng nh·∫π cho widget."""
        shadow = QGraphicsDropShadowEffect(self)
        shadow.setBlurRadius(25)
        shadow.setOffset(0, 5)
        shadow.setColor(QColor(0, 0, 0, 25))
        self.setGraphicsEffect(shadow)


# ==============================================================================
# L·ªöP 2: DoNowView - Widget ch√≠nh c·ªßa trang "My Tasks"
# ==============================================================================
class DoNowView(QWidget):
    """
    Widget ch√≠nh ch·ª©a to√†n b·ªô giao di·ªán c·ªßa trang "My Tasks", bao g·ªìm form th√™m
    vi·ªác, thanh l·ªçc, danh s√°ch c√¥ng vi·ªác v√† ƒëi·ªÅu khi·ªÉn ph√¢n trang.
    """
    def __init__(self, user_id=None, db_manager=None, parent=None):
        super().__init__(parent)
        self.current_user_id = user_id
        self.db_manager = db_manager if db_manager else Database()
        
        # C√°c bi·∫øn tr·∫°ng th√°i ƒë·ªÉ qu·∫£n l√Ω d·ªØ li·ªáu v√† giao di·ªán
        self.all_tasks = []  # L∆∞u t·∫•t c·∫£ c√¥ng vi·ªác l·∫•y t·ª´ CSDL
        self.timer_metadata = {}  # L∆∞u th√¥ng tin timer cho m·ªói c√¥ng vi·ªác
        self.task_history = {} # L∆∞u l·ªãch s·ª≠ t∆∞∆°ng t√°c (ch∆∞a d√πng t·ªõi)
        self.search_query = ""
        self.filter_status = "all"  # 'all', 'pending', 'done'
        self.current_page = 1
        self.items_per_page = 10
        self.current_priority_selection = 2  # M·∫∑c ƒë·ªãnh l√† ∆∞u ti√™n trung b√¨nh

        self.setup_ui()  # B·∫Øt ƒë·∫ßu x√¢y d·ª±ng giao di·ªán
        self.load_data_from_db()  # T·∫£i d·ªØ li·ªáu t·ª´ CSDL

        # Timer ƒë·ªÉ ki·ªÉm tra c√°c c√¥ng vi·ªác s·∫Øp h·∫øt h·∫°n
        self.notification_timer = QTimer(self)
        self.notification_timer.timeout.connect(self._check_upcoming_deadlines)
        self.notification_timer.start(60 * 1000)  # Ch·∫°y m·ªói ph√∫t

    def setup_ui(self):
        """X√¢y d·ª±ng to√†n b·ªô giao di·ªán c·ªßa trang."""
        self.setObjectName("DoNowView")
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(25, 20, 25, 20)
        main_layout.setSpacing(20)

        # Ti√™u ƒë·ªÅ ch√≠nh c·ªßa trang
        header_label = QLabel("C√¥ng vi·ªác c·ªßa t√¥i")
        header_label.setStyleSheet(f"font-size: 28px; font-weight: bold; color: {COLOR_TEXT_PRIMARY};")
        main_layout.addWidget(header_label)

        # Th√™m c√°c nh√≥m widget con v√†o layout ch√≠nh
        main_layout.addWidget(self._create_add_task_form())
        main_layout.addWidget(self._create_filter_bar())
        main_layout.addWidget(self._create_task_list_area(), 1) # Chi·∫øm ph·∫ßn l·ªõn kh√¥ng gian
        main_layout.addLayout(self._create_pagination_controls())

    def _create_add_task_form(self):
        """T·∫°o form ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p c√¥ng vi·ªác m·ªõi."""
        form_group = QGroupBox("‚ú® Th√™m c√¥ng vi·ªác m·ªõi")
        layout = QGridLayout(form_group)
        
        # C√°c √¥ nh·∫≠p li·ªáu
        self.title_input = QLineEdit(placeholderText="VD: Ho√†n th√†nh b√°o c√°o d·ª± √°n")
        self.due_date_input = QDateTimeEdit(calendarPopup=True)
        self.due_date_input.setDateTime(QDateTime.currentDateTime())
        self.estimated_time_input = QLineEdit(placeholderText="Th·ªùi gian (ph√∫t)")
        self.note_input = QLineEdit(placeholderText="Ghi ch√∫ (t√πy ch·ªçn)")
        
        # N√∫t ch·ªçn ƒë·ªô ∆∞u ti√™n
        self.priority_button = QPushButton()
        self.priority_button.setToolTip("Ch·ªçn ƒë·ªô ∆∞u ti√™n")
        self._update_priority_button_icon(self.current_priority_selection) # ƒê·∫∑t icon m·∫∑c ƒë·ªãnh
        self.priority_button.clicked.connect(self._show_priority_menu)

        # N√∫t "Th√™m"
        add_task_button = QPushButton("Th√™m c√¥ng vi·ªác")
        add_task_button.setObjectName("MainCTA") # ƒê·∫∑t t√™n ƒë·ªÉ √°p d·ª•ng CSS
        add_task_button.clicked.connect(self._handle_add_task)

        # S·∫Øp x·∫øp c√°c widget v√†o l∆∞·ªõi
        layout.addWidget(self.title_input, 0, 0, 1, 2)
        layout.addWidget(self.due_date_input, 1, 0)
        layout.addWidget(self.estimated_time_input, 1, 1)
        layout.addWidget(self.priority_button, 1, 2)
        layout.addWidget(add_task_button, 0, 2, 1, 1)
        layout.addWidget(self.note_input, 2, 0, 1, 3)
        
        # Cho ph√©p nh·∫•n Enter ƒë·ªÉ th√™m vi·ªác
        self.title_input.returnPressed.connect(self._handle_add_task)
        return form_group

    def _show_priority_menu(self):
        """Hi·ªÉn th·ªã menu ng·ªØ c·∫£nh ƒë·ªÉ ch·ªçn ƒë·ªô ∆∞u ti√™n."""
        menu = QMenu(self)
        priority_map = {1: "Cao", 2: "Trung b√¨nh", 3: "Th·∫•p"}
        icon_map = {1: 'flag-red.svg', 2: 'flag-green.svg', 3: 'flag-blue.svg'}
        
        for priority_value, priority_name in priority_map.items():
            icon_path = os.path.join(ICON_DIR, icon_map[priority_value])
            action = QAction(QIcon(icon_path), f"∆Øu ti√™n: {priority_name}", self)
            action.triggered.connect(lambda _, p=priority_value: self._update_priority_button_icon(p))
            menu.addAction(action)
            
        menu.exec_(self.priority_button.mapToGlobal(self.priority_button.rect().bottomLeft()))

    def _update_priority_button_icon(self, priority):
        """C·∫≠p nh·∫≠t icon v√† tr·∫°ng th√°i ƒë·ªô ∆∞u ti√™n ƒë∆∞·ª£c ch·ªçn."""
        self.current_priority_selection = priority
        icon_map = {1: 'flag-red.svg', 2: 'flag-green.svg', 3: 'flag-blue.svg'}
        icon_path = os.path.join(ICON_DIR, icon_map.get(priority))
        if os.path.exists(icon_path):
            self.priority_button.setIcon(QIcon(icon_path))

    def _create_filter_bar(self):
        """T·∫°o thanh ch·ª©a √¥ t√¨m ki·∫øm v√† b·ªô l·ªçc tr·∫°ng th√°i."""
        filter_container = QFrame()
        layout = QHBoxLayout(filter_container)
        layout.setContentsMargins(0,0,0,0)
        
        self.search_input = QLineEdit(placeholderText="T√¨m ki·∫øm c√¥ng vi·ªác...")
        self.search_input.textChanged.connect(self._handle_search_change)
        
        self.status_filter_combo = QComboBox()
        self.status_filter_combo.addItems(["T·∫•t c·∫£ tr·∫°ng th√°i", "ƒêang ch·ªù", "Ho√†n th√†nh"])
        self.status_filter_combo.currentIndexChanged.connect(self._handle_filter_change)
        
        layout.addWidget(self.search_input, 1)
        layout.addWidget(self.status_filter_combo)
        return filter_container

    def _create_task_list_area(self):
        """T·∫°o khu v·ª±c c√≥ th·ªÉ cu·ªôn ƒë·ªÉ ch·ª©a danh s√°ch c√°c c√¥ng vi·ªác."""
        list_group = QGroupBox("üìå Danh s√°ch c√¥ng vi·ªác")
        layout = QVBoxLayout(list_group)
        
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        
        self.tasks_container_widget = QWidget() # Widget ch·ª©a c√°c TaskItemWidget
        self.tasks_container_widget.setObjectName("TasksContainer")
        self.tasks_list_layout = QVBoxLayout(self.tasks_container_widget)
        self.tasks_list_layout.setAlignment(Qt.AlignTop)
        
        scroll_area.setWidget(self.tasks_container_widget)
        layout.addWidget(scroll_area)
        return list_group

    def _create_pagination_controls(self):
        """T·∫°o c√°c n√∫t "Tr∆∞·ªõc", "Sau" v√† nh√£n hi·ªÉn th·ªã trang."""
        pagination_layout = QHBoxLayout()
        self.prev_page_button = QPushButton("Tr∆∞·ªõc")
        self.next_page_button = QPushButton("Sau")
        self.prev_page_button.setObjectName("PaginationButton")
        self.next_page_button.setObjectName("PaginationButton")
        self.page_label = QLabel(f"Trang {self.current_page}")
        
        pagination_layout.addStretch()
        pagination_layout.addWidget(self.prev_page_button)
        pagination_layout.addWidget(self.page_label)
        pagination_layout.addWidget(self.next_page_button)
        pagination_layout.addStretch()
        
        self.prev_page_button.clicked.connect(lambda: self._handle_page_change(-1))
        self.next_page_button.clicked.connect(lambda: self._handle_page_change(1))
        return pagination_layout

    def load_data_from_db(self):
        """T·∫£i danh s√°ch c√¥ng vi·ªác t·ª´ CSDL v√† l∆∞u v√†o `self.all_tasks`."""
        try:
            # L·∫•y t·∫•t c·∫£ c√¥ng vi·ªác c·ªßa ng∆∞·ªùi d√πng
            task_rows = self.db_manager.get_tasks_for_user(self.current_user_id)
            self.all_tasks = []
            for row in task_rows:
                # Chuy·ªÉn ƒë·ªïi m·ªói h√†ng t·ª´ tuple sang dictionary ƒë·ªÉ d·ªÖ l√†m vi·ªác
                self.all_tasks.append({
                    "id": str(row[0]), "title": row[1], "is_done": bool(row[2]),
                    "due_at": row[3], "estimated_minutes": row[4],
                    "priority": row[5], "note": row[6]
                })
        except Exception as error:
            print(f"L·ªói khi t·∫£i danh s√°ch c√¥ng vi·ªác: {error}")
        self.render_tasks_on_ui() # Sau khi t·∫£i xong, v·∫Ω l·∫°i giao di·ªán

    def get_visible_tasks(self):
        """
        Th·ª±c hi·ªán l·ªçc, s·∫Øp x·∫øp v√† ph√¢n trang danh s√°ch c√¥ng vi·ªác.
        ƒê√¢y l√† h√†m logic c·ªët l√µi c·ªßa trang.
        
        Returns:
            tuple: (danh s√°ch t·∫•t c·∫£ c√¥ng vi·ªác ƒë√£ l·ªçc, danh s√°ch c√¥ng vi·ªác cho trang hi·ªán t·∫°i)
        """
        # 1. H√†m s·∫Øp x·∫øp: ∆Øu ti√™n c√¥ng vi·ªác ch∆∞a xong, sau ƒë√≥ ƒë·∫øn ƒë·ªô ∆∞u ti√™n, r·ªìi ƒë·∫øn h·∫°n ch√≥t
        def sort_key(task):
            # (False, 1, ...) s·∫Ω ƒë·ª©ng tr∆∞·ªõc (True, 2, ...)
            return (task['is_done'], task.get('priority', 4))

        sorted_tasks = sorted(self.all_tasks, key=sort_key)
        
        # 2. H√†m l·ªçc: L·ªçc theo tr·∫°ng th√°i v√† t·ª´ kh√≥a t√¨m ki·∫øm
        def filter_function(task):
            match_status = (self.filter_status == "all" or
                            (self.filter_status == "pending" and not task['is_done']) or
                            (self.filter_status == "done" and task['is_done']))
            
            match_search = self.search_query.lower() in task['title'].lower()
            return match_status and match_search
            
        filtered_tasks = list(filter(filter_function, sorted_tasks))
        
        # 3. Ph√¢n trang: L·∫•y ra l√°t c·∫Øt d·ªØ li·ªáu cho trang hi·ªán t·∫°i
        start_index = (self.current_page - 1) * self.items_per_page
        end_index = start_index + self.items_per_page
        paginated_tasks = filtered_tasks[start_index:end_index]
        
        return filtered_tasks, paginated_tasks

    def render_tasks_on_ui(self):
        """V·∫Ω l·∫°i danh s√°ch c√¥ng vi·ªác tr√™n giao di·ªán d·ª±a tr√™n tr·∫°ng th√°i hi·ªán t·∫°i."""
        # X√≥a t·∫•t c·∫£ widget c√¥ng vi·ªác c≈©
        while self.tasks_list_layout.count():
            child = self.tasks_list_layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()
        
        all_filtered, visible_tasks = self.get_visible_tasks()
        
        if not visible_tasks:
            # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ c√¥ng vi·ªác n√†o
            no_tasks_label = QLabel("üéâ Tuy·ªát v·ªùi! B·∫°n kh√¥ng c√≥ c√¥ng vi·ªác n√†o c·∫ßn l√†m.")
            no_tasks_label.setAlignment(Qt.AlignCenter)
            self.tasks_list_layout.addWidget(no_tasks_label)
        else:
            # T·∫°o v√† th√™m widget cho t·ª´ng c√¥ng vi·ªác
            for task_details in visible_tasks:
                task_widget = TaskItemWidget(task_details, self.timer_metadata.get(task_details['id'], {}))
                # K·∫øt n·ªëi c√°c t√≠n hi·ªáu t·ª´ widget con ƒë·∫øn c√°c h√†m x·ª≠ l√Ω c·ªßa widget cha
                task_widget.task_toggled.connect(self._handle_toggle_task)
                task_widget.task_deleted.connect(self._handle_delete_task)
                task_widget.task_started.connect(self._handle_start_task)
                self.tasks_list_layout.addWidget(task_widget)
        
        self.tasks_list_layout.addStretch() # ƒê·∫©y c√°c m·ª•c l√™n tr√™n
        
        # C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i c·ªßa c√°c n√∫t ph√¢n trang
        self.page_label.setText(f"Trang {self.current_page}")
        self.prev_page_button.setEnabled(self.current_page > 1)
        self.next_page_button.setEnabled(len(all_filtered) > self.current_page * self.items_per_page)

    # --- C√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán ---

    def _handle_add_task(self):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t 'Th√™m c√¥ng vi·ªác'."""
        title = self.title_input.text().strip()
        if not title:
            QMessageBox.warning(self, "Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ c√¥ng vi·ªác.")
            return

        due_at = self.due_date_input.dateTime().toPyDateTime().strftime('%Y-%m-%d %H:%M:%S')
        estimated_str = self.estimated_time_input.text().strip()
        estimated_minutes = int(estimated_str) if estimated_str.isdigit() else None
        note = self.note_input.text().strip()
        
        try:
            self.db_manager.add_task_with_meta(
                user_id=self.current_user_id, title=title, note=note, 
                due_at=due_at, estimated_minutes=estimated_minutes, 
                priority=self.current_priority_selection
            )
            # X√≥a n·ªôi dung trong form v√† t·∫£i l·∫°i d·ªØ li·ªáu
            self.title_input.clear()
            self.estimated_time_input.clear()
            self.note_input.clear()
            self.load_data_from_db()
        except Exception as error:
            QMessageBox.critical(self, "L·ªói CSDL", f"Kh√¥ng th·ªÉ th√™m c√¥ng vi·ªác: {error}")
    
    def _handle_toggle_task(self, task_id):
        """X·ª≠ l√Ω khi tr·∫°ng th√°i ho√†n th√†nh c·ªßa m·ªôt c√¥ng vi·ªác thay ƒë·ªïi."""
        try:
            # T√¨m c√¥ng vi·ªác trong danh s√°ch v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
            task = next(t for t in self.all_tasks if t['id'] == task_id)
            new_status = not task['is_done']
            self.db_manager.update_task_status(int(task_id), int(new_status))
            task['is_done'] = new_status  # C·∫≠p nh·∫≠t tr·∫°ng th√°i trong danh s√°ch local
            self.render_tasks_on_ui()  # V·∫Ω l·∫°i giao di·ªán
        except (StopIteration, Exception) as error:
            print(f"L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i c√¥ng vi·ªác: {error}")

    def _handle_delete_task(self, task_id):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng x√≥a m·ªôt c√¥ng vi·ªác."""
        try:
            self.db_manager.delete_task(int(task_id))
            # X√≥a c√¥ng vi·ªác kh·ªèi danh s√°ch local v√† v·∫Ω l·∫°i giao di·ªán
            self.all_tasks = [t for t in self.all_tasks if t['id'] != task_id]
            self.render_tasks_on_ui()
        except Exception as error:
            print(f"L·ªói khi x√≥a c√¥ng vi·ªác: {error}")

    def _handle_start_task(self, task_id):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu t√≠nh gi·ªù cho m·ªôt c√¥ng vi·ªác."""
        self.timer_metadata.setdefault(task_id, {})['start'] = time.time()
        QMessageBox.information(self, "B·∫Øt ƒë·∫ßu", "ƒê√£ b·∫Øt ƒë·∫ßu t√≠nh gi·ªù cho c√¥ng vi·ªác.")

    def _handle_search_change(self, text):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm."""
        self.search_query = text
        self.current_page = 1  # Quay v·ªÅ trang ƒë·∫ßu ti√™n khi c√≥ t√¨m ki·∫øm m·ªõi
        self.render_tasks_on_ui()

    def _handle_filter_change(self, index):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng thay ƒë·ªïi b·ªô l·ªçc tr·∫°ng th√°i."""
        filter_map = {0: "all", 1: "pending", 2: "done"}
        self.filter_status = filter_map.get(index)
        self.current_page = 1  # Quay v·ªÅ trang ƒë·∫ßu ti√™n
        self.render_tasks_on_ui()
        
    def _handle_page_change(self, delta):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t 'Tr∆∞·ªõc' ho·∫∑c 'Sau'."""
        self.current_page = max(1, self.current_page + delta)
        self.render_tasks_on_ui()
        
    def _check_upcoming_deadlines(self):
        """Ki·ªÉm tra v√† th√¥ng b√°o cho c√°c c√¥ng vi·ªác s·∫Øp h·∫øt h·∫°n."""
        now = datetime.now()
        for task in self.all_tasks:
            if not task['is_done'] and task['due_at']:
                try:
                    due_date = datetime.fromisoformat(task['due_at'])
                    time_left = due_date - now
                    # N·∫øu th·ªùi gian c√≤n l·∫°i t·ª´ 0 ƒë·∫øn 15 ph√∫t
                    if timedelta(minutes=0) < time_left <= timedelta(minutes=15):
                        QMessageBox.warning(self, "Nh·∫Øc nh·ªü", f"C√¥ng vi·ªác '{task['title']}' s·∫Øp ƒë·∫øn h·∫°n!\n"
                                                              f"C√≤n kho·∫£ng {time_left.seconds // 60} ph√∫t.")
                except (ValueError, TypeError):
                    continue